{"version":3,"sources":["../../src/index.tsx","components/authorization/RegistrationForm/RegistrationForm.js","views/RegistrationPage/RegistrationPage.js"],"names":["ProgressBar","alignmentOption","bgColor","completed","baseBgColor","height","width","margin","padding","borderRadius","labelAlignment","labelColor","labelSize","isLabelVisible","transitionDuration","transitionTimingFunction","className","dir","ariaValuemin","ariaValuemax","ariaValuetext","maxCompleted","customLabel","animateOnRender","barContainerClassName","completedClassName","labelClassName","alignment","fillerWidth","maxCompletedValue","completedValue","ratio","Number","getFillerWidth","React.useState","initWidth","setInitWidth","containerStyles","backgroundColor","fillerStyles","transition","display","alignItems","justifyContent","labelStyles","color","fontWeight","fontSize","outsideStyles","labelStr","React.useEffect","requestAnimationFrame","React.createElement","style","undefined","role","parseFloat","propTypes","PropTypes.oneOfType","PropTypes.string","PropTypes.number","isRequired","PropTypes.oneOf","PropTypes.bool","defaultProps","RegistrationForm","dispatch","useDispatch","useState","progressValue","setProgressValue","progressUp","prevState","validationsSchema","yup","shape","email","required","password","matches","min","max","typeError","confirmPassword","oneOf","name","initialValues","validateOnBlur","validateOnChange","onSubmit","resetForm","operations","registration","validationSchema","values","errors","touched","handleSubmit","handleChange","handleBlur","isValid","dirty","type","placeholder","onChange","value","onBlur","e","to","RegistrationView","query","render"],"mappings":"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","file":"static/js/RegisterView.f900cfaf.chunk.js","sourcesContent":["import * as React from \"react\";\nimport * as PropTypes from \"prop-types\";\n\nexport type ProgressBarProps = {\n  completed: string | number;\n  bgColor?: string;\n  baseBgColor?: string;\n  height?: string;\n  width?: string;\n  borderRadius?: string;\n  margin?: string;\n  padding?: string;\n  labelAlignment?: \"left\" | \"center\" | \"right\" | \"outside\";\n  labelColor?: string;\n  labelSize?: string;\n  isLabelVisible?: boolean;\n  transitionDuration?: string;\n  transitionTimingFunction?:\n    | \"ease\"\n    | \"linear\"\n    | \"ease-in\"\n    | \"ease-out\"\n    | \"ease-in-out\";\n  className?: string;\n  dir?: \"ltr\" | \"rtl\" | \"auto\";\n  ariaValuemin?: number;\n  ariaValuemax?: number;\n  ariaValuetext?: number | null;\n  maxCompleted?: number;\n  customLabel?: string;\n  animateOnRender?: boolean;\n  barContainerClassName?: string;\n  completedClassName?: string;\n  labelClassName?: string;\n};\n\nconst ProgressBar: React.FC<ProgressBarProps> = ({\n  bgColor,\n  completed,\n  baseBgColor,\n  height,\n  width,\n  margin,\n  padding,\n  borderRadius,\n  labelAlignment,\n  labelColor,\n  labelSize,\n  isLabelVisible,\n  transitionDuration,\n  transitionTimingFunction,\n  className,\n  dir,\n  ariaValuemin,\n  ariaValuemax,\n  ariaValuetext,\n  maxCompleted,\n  customLabel,\n  animateOnRender,\n  barContainerClassName,\n  completedClassName,\n  labelClassName,\n}) => {\n  const getAlignment = (\n    alignmentOption: ProgressBarProps[\"labelAlignment\"]\n  ) => {\n    if (alignmentOption === \"left\") {\n      return \"flex-start\";\n    } else if (alignmentOption === \"center\") {\n      return \"center\";\n    } else if (alignmentOption === \"right\") {\n      return \"flex-end\";\n    } else {\n      return null;\n    }\n  };\n\n  const alignment = getAlignment(labelAlignment);\n\n  const getFillerWidth = (\n    maxCompletedValue: ProgressBarProps[\"maxCompleted\"],\n    completedValue: ProgressBarProps[\"completed\"]\n  ) => {\n    if (maxCompletedValue) {\n      const ratio = Number(completedValue) / maxCompletedValue;\n      return ratio > 1 ? \"100%\" : `${ratio * 100}%`;\n    }\n    return 0;\n  };\n\n  const fillerWidth = getFillerWidth(maxCompleted, completed);\n\n  const [initWidth, setInitWidth] = React.useState<string | 0>(0);\n\n  const containerStyles: React.CSSProperties = {\n    height: height,\n    backgroundColor: baseBgColor,\n    borderRadius: borderRadius,\n    padding: padding,\n    width: width,\n    margin: margin,\n  };\n\n  const fillerStyles: React.CSSProperties = {\n    height: height,\n    width: animateOnRender ? initWidth : fillerWidth,\n    backgroundColor: bgColor,\n    transition: `width ${transitionDuration || \"1s\"} ${\n      transitionTimingFunction || \"ease-in-out\"\n    }`,\n    borderRadius: \"inherit\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent:\n      labelAlignment !== \"outside\" && alignment ? alignment : \"normal\",\n  };\n\n  const labelStyles: React.CSSProperties = {\n    padding: labelAlignment === \"outside\" ? \"0 0 0 5px\" : \"5px\",\n    color: labelColor,\n    fontWeight: \"bold\",\n    fontSize: labelSize,\n    display: !isLabelVisible ? \"none\" : \"initial\",\n  };\n\n  const outsideStyles = {\n    display: labelAlignment === \"outside\" ? \"flex\" : \"initial\",\n    alignItems: labelAlignment === \"outside\" ? \"center\" : \"initial\",\n  };\n\n  const completedStr =\n    typeof completed === \"number\" ? `${completed}%` : `${completed}`;\n\n  const labelStr = customLabel ? customLabel : completedStr;\n\n  React.useEffect(() => {\n    if (animateOnRender) {\n      requestAnimationFrame(() => setInitWidth(fillerWidth));\n    }\n  }, [fillerWidth, animateOnRender]);\n\n  return (\n    <div\n      style={className ? undefined : outsideStyles}\n      className={className}\n      dir={dir}\n      role=\"progressbar\"\n      aria-valuenow={parseFloat(labelStr)}\n      aria-valuemin={ariaValuemin}\n      aria-valuemax={ariaValuemax}\n      aria-valuetext={`${ariaValuetext === null ? labelStr : ariaValuetext}`}\n    >\n      <div\n        style={barContainerClassName ? undefined : containerStyles}\n        className={barContainerClassName}\n      >\n        <div\n          style={completedClassName ? undefined : fillerStyles}\n          className={completedClassName}\n        >\n          {labelAlignment !== \"outside\" && (\n            <span\n              style={labelClassName ? undefined : labelStyles}\n              className={labelClassName}\n            >\n              {labelStr}\n            </span>\n          )}\n        </div>\n      </div>\n      {labelAlignment === \"outside\" && (\n        <span\n          style={labelClassName ? undefined : labelStyles}\n          className={labelClassName}\n        >\n          {labelStr}\n        </span>\n      )}\n    </div>\n  );\n};\n\nProgressBar.propTypes = {\n  completed: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  bgColor: PropTypes.string,\n  baseBgColor: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  borderRadius: PropTypes.string,\n  margin: PropTypes.string,\n  padding: PropTypes.string,\n  labelAlignment: PropTypes.oneOf([\"left\", \"center\", \"right\", \"outside\"]),\n  labelColor: PropTypes.string,\n  labelSize: PropTypes.string,\n  isLabelVisible: PropTypes.bool,\n  className: PropTypes.string,\n  dir: PropTypes.oneOf([\"rtl\", \"ltr\", \"auto\"]),\n  maxCompleted: PropTypes.number,\n  customLabel: PropTypes.string,\n  animateOnRender: PropTypes.bool,\n  barContainerClassName: PropTypes.string,\n  completedClassName: PropTypes.string,\n  labelClassName: PropTypes.string,\n};\n\nProgressBar.defaultProps = {\n  bgColor: \"#6a1b9a\",\n  height: \"20px\",\n  width: \"100%\",\n  borderRadius: \"50px\",\n  labelAlignment: \"right\",\n  baseBgColor: \"#e0e0de\",\n  labelColor: \"#fff\",\n  labelSize: \"15px\",\n  isLabelVisible: true,\n  dir: \"ltr\",\n  ariaValuemin: 0,\n  ariaValuemax: 100,\n  ariaValuetext: null,\n  maxCompleted: 100,\n  animateOnRender: false,\n};\n\nexport default ProgressBar;\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport ProgressBar from '@ramonak/react-progress-bar'\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport operations from '../../../redux/auth/auth-operations';\r\nimport '../authForm.scss'\r\nexport default function RegistrationForm() {\r\n    const dispatch = useDispatch()\r\n    const [progressValue, setProgressValue] = useState(0)\r\n\r\n    const progressUp = () => {\r\n        if (progressValue <= 4) {\r\n\r\n            setProgressValue(prevState => prevState + 1)\r\n            // console.log(progressValue)\r\n        }\r\n        return\r\n    }\r\n\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().email('Введите корректный email').required('Обязательноe поле'),\r\n        password: yup.string().matches(\r\n            // /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]/,\r\n            /[0-9a-zA-Z!@#$%^&*]/,\r\n            'Недопустимые символы для пароля'\r\n        ).min(6, 'Пароль должен быть не менее 6 символов').max(12, 'Максимальная длина пароля 12 символов').typeError('Должно быть строкой').required('Обязательноe поле'),\r\n        confirmPassword: yup.string().oneOf([yup.ref('password')], 'Пароли не совпадают').required('Обязательноe поле'),\r\n        name: yup.string().min(1, 'Минимальная длина имени 1 символ').typeError('Должно быть строкой').required('Обязательноe поле'),\r\n    })\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                name: '',\r\n            }}\r\n            validateOnBlur\r\n            validateOnChange={false}\r\n            onSubmit={({ email, password, name }, { resetForm }) => {\r\n                dispatch(operations.registration({ email, password, name }))\r\n                resetForm();\r\n            }}\r\n            validationSchema={validationsSchema}\r\n        >\r\n            {({ values, errors, touched, handleSubmit, handleChange, handleBlur, isValid, dirty }) => (\r\n                <div className=\"form-block\">\r\n                    <div className=\"form-container\">\r\n                        <span className=\"logo\"></span>\r\n                        <form\r\n                            className=\"auth-form\"\r\n                            onSubmit={handleSubmit}>\r\n                            <label className=\"form-label\" type=\"email\">\r\n                                <input\r\n                                    className=\"form-input input-js-email\"\r\n                                    placeholder=\"E-mail\"\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    onChange={handleChange}\r\n                                    value={values.email}\r\n                                    onBlur={e => { handleBlur(e); progressUp() }}\r\n                                />\r\n                                {touched.email && errors.email && <p className={'input-error'}>{errors.email}</p>}\r\n                            </label>\r\n                            <label className=\"form-label\" type=\"password\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Пароль\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    onChange={handleChange}\r\n                                    value={values.password}\r\n                                    onBlur={e => { handleBlur(e); progressUp() }}\r\n                                />\r\n                                {touched.password && errors.password && <p className={'input-error'}>{errors.password}</p>}\r\n                            </label>\r\n                            <label className=\"form-label\" type=\"password\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Подтвердите пароль\"\r\n                                    type=\"password\"\r\n                                    name=\"confirmPassword\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={e => {\r\n                                        handleBlur(e);\r\n                                        progressUp();\r\n\r\n                                    }}\r\n                                    value={values.confirmPassword}\r\n                                />\r\n                                {touched.confirmPassword && errors.confirmPassword && <p className={'input-error'}>{errors.confirmPassword}</p>}\r\n                            </label>\r\n                            {/* <progress value={progressValue} max={4}></progress> */}\r\n                            <ProgressBar className=\"progress-bar\" completed={progressValue} maxCompleted={4} isLabelVisible={false} height={\"4px\"} margin={'0 0 28px 0'} bgColor={'#24cca7'} baseBgColor={'#e5f1ef'} />\r\n                            <label className=\"form-label\" type=\"text\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Ваше имя\"\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    onChange={handleChange}\r\n                                    value={values.name}\r\n                                    onBlur={e => {\r\n                                        handleBlur(e);\r\n                                        progressUp();\r\n\r\n                                    }}\r\n                                />\r\n                                {touched.name && errors.name && <p className={'input-error'}>{errors.name}</p>}\r\n                            </label>\r\n                            <button className=\"login-button\" type=\"submit\">Регистрация</button>\r\n                            <NavLink\r\n                                className=\"nav-button\"\r\n                                to=\"/fin-project-front/login\"\r\n                            // exact\r\n                            >\r\n                                Вход\r\n                            </NavLink>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import Media from 'react-media';\r\nimport RegistrationForm from '../../components/authorization/RegistrationForm/RegistrationForm'\r\n\r\n\r\nexport default function RegistrationView() {\r\n    return (\r\n        <>\r\n            <Media query=\"(max-width: 767px)\" render={() =>\r\n            (\r\n                <RegistrationForm />\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 768px) and (max-width: 1279px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block\">\r\n                        <div className=\"auth-image reg-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <RegistrationForm />\r\n                </div>\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 1280px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block reg-block\">\r\n                        <div className=\"auth-image reg-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <div className=\"form-blur reg-blur\">\r\n                        <RegistrationForm />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            />\r\n        </>\r\n\r\n\r\n    );\r\n};"],"sourceRoot":""}