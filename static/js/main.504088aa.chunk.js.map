{"version":3,"sources":["components/PublicRoute.js","App.js","redux/store.js","index.js","redux/auth/auth-selectors.js","redux/auth/auth-reducer.js","redux/auth/auth-actions.js","redux/transactions/transactions-actions.js","components/PrivateRoute.js","redux/auth/auth-operations.js","redux/transactions/transactions-reducer.js"],"names":["PublicRoute","component","redirectTo","children","routeProps","shouldRedirect","useSelector","authSelectors","getIsLoggedIn","restricted","to","HomePage","lazy","StatisticPage","CurrencyPage","RegistrationPage","LoginPage","App","dispatch","useDispatch","isLoggedIn","name","getUserName","console","log","useEffect","authOperations","getCurrentUser","className","fallback","type","color","height","width","exact","path","PrivateRoute","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","transactions","transactionsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","state","user","getUserEmail","email","getToken","token","getBalance","balance","initialState","createReducer","actions","_","payload","data","setError","error","combineReducers","registrationRequest","createAction","registrationSuccess","registrationError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","openModalTransaction","closeModalTransaction","fetchTransactionRequest","fetchTransactionSuccess","fetchTransactionError","addTransactionRequest","addTransactionSuccess","addTransactionError","getQueryStatisticsRequest","getQueryStatisticsSuccess","getQueryStatisticsError","getTransactionCategoriesRequest","getTransactionCategoriesSuccess","getTransactionCategoriesError","axios","defaults","baseURL","headers","common","Authorization","operations","registration","password","post","then","toastr","success","catch","message","login","logout","get","getState","a","persistedToken","modalTransaction","allTransactions","queryStatistics","transactionCategories"],"mappings":"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","file":"static/js/main.504088aa.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nexport default function PublicRoute({ \r\n    component: Component,\r\n    redirectTo,\r\n    children,\r\n    ...routeProps\r\n }) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    const shouldRedirect = isLoggedIn && routeProps.restricted;\r\n    return (\r\n        <Route {...routeProps}>\r\n            {shouldRedirect ? <Redirect to={redirectTo}/> : children }\r\n        </Route>\r\n    );\r\n}","// import logo from './wallet-logo.svg';\r\n\r\nimport React, { Suspense, lazy, useEffect } from 'react';\r\nimport { Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authOperations, authSelectors } from './redux/auth';\r\nimport Loader from 'react-loader-spinner';\r\n\r\n\r\nimport { ToastContainer } from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport PublicRoute from './components/PublicRoute'\r\nimport PrivateRoute from './components/PrivateRoute'\r\n\r\nimport './App.scss';\r\n\r\nconst HomePage = lazy(() => import('./views/HomePage/HomePage'))\r\nconst StatisticPage = lazy(() => import('./views/StatisticPage/StatisticPage'))\r\nconst CurrencyPage = lazy(() => import('./views/CurrencyPage/CurrencyPage'))\r\n\r\nconst RegistrationPage = lazy(() => import('./views/RegistrationPage/RegistrationPage' /* webpackChunkName: \"RegisterView\"*/),);\r\nconst LoginPage = lazy(() => import('./views/LoginPage/LoginPage' /* webpackChunkName: \"LoginView\"*/),);\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\r\n  const name = useSelector(authSelectors.getUserName)\r\n  console.log(isLoggedIn)\r\n  console.log(name)\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.getCurrentUser());\r\n  }, [dispatch]);\r\n\r\n\r\n  return (\r\n    (\r\n      <div className=\"App\">\r\n        <Suspense fallback={<Loader type=\"ThreeDots\" color=\"brown\" height={80} width={80} />}>\r\n\r\n          <Switch>\r\n            <PublicRoute exact path=\"/fin-project-front/registration\" redirectTo=\"/fin-project-front/home\">\r\n              <RegistrationPage />\r\n            </PublicRoute>\r\n\r\n            <PublicRoute path=\"/fin-project-front/login\" restricted redirectTo=\"/fin-project-front/home\">\r\n              <LoginPage />\r\n            </PublicRoute>\r\n\r\n            <PrivateRoute path=\"/fin-project-front/home\" redirectTo=\"/fin-project-front/login\">\r\n              <ToastContainer />\r\n              <HomePage />\r\n            </PrivateRoute>\r\n\r\n            <PrivateRoute path=\"/fin-project-front/statistics\" redirectTo=\"/fin-project-front/login\">\r\n              <StatisticPage />\r\n            </PrivateRoute>\r\n\r\n            <PrivateRoute path=\"/fin-project-front/currency\" redirectTo=\"/fin-project-front/login\">\r\n              <CurrencyPage />\r\n            </PrivateRoute>\r\n\r\n            <PublicRoute>\r\n              <Redirect to=\"/fin-project-front/registration\" />\r\n            </PublicRoute>\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    ));\r\n}\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport transactionsReducer from './transactions/transactions-reducer';\r\nimport { authReducer } from './auth';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    transactions: transactionsReducer,\r\n    //balance: balance,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate\r\n        loading={<h3>Загружаем локальное хранилище</h3>}\r\n        persistor={persistor}\r\n      >\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getToken = state => state.auth.token; //added line to re-set token for statistics API\r\n\r\nconst getBalance = state => state.auth.user.balance;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nconst getUserEmail = state => state.auth.user.email;\r\n\r\nconst authSelectors = {\r\n  getIsLoggedIn,\r\n  getUserName,\r\n  getUserEmail,\r\n  getToken,\r\n  getBalance,\r\n};\r\nexport default authSelectors;","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './auth-actions'\r\n\r\nconst initialState = {\r\n    user: { name: null, email: null }\r\n};\r\n\r\nconst user = createReducer(initialState, {\r\n    [actions.registrationSuccess]: (_, { payload }) => payload.data,\r\n    [actions.loginSuccess]: (_, { payload }) => payload.data.user,\r\n    [actions.logoutRequest]: () => initialState,\r\n    [actions.getCurrentUserSuccess]: (_, { payload }) => payload.data.data.user\r\n});\r\n\r\nconst token = createReducer(null, {\r\n    [actions.registrationSuccess]: (_, { payload }) => payload.data.token,\r\n    [actions.loginSuccess]: (_, { payload }) => payload.data.token,\r\n    [actions.logoutSuccess]: () => null,\r\n    [actions.logoutRequest]: () => null,\r\n});\r\n\r\nconst isLoggedIn = createReducer(false, {\r\n    [actions.registrationSuccess]: () => false,\r\n    [actions.loginSuccess]: () => true,\r\n    [actions.getCurrentUserSuccess]: () => true,\r\n    [actions.logoutSuccess]: () => false,\r\n    [actions.logoutRequest]: () => false,\r\n    [actions.registrationError]: false,\r\n    [actions.loginError]: false,\r\n    [actions.getCurrentUserError]: false\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n    [actions.registrationError]: setError,\r\n    [actions.loginError]: setError,\r\n    [actions.logoutError]: setError,\r\n    [actions.getCurrentUserError]: setError,\r\n});\r\n\r\nexport default combineReducers({\r\n    user,\r\n    token,\r\n    isLoggedIn,\r\n    error\r\n});\r\n        // [authOperations.logOut.fulfilled](state) {\r\n        //     state.user = { name: null, email: null };\r\n        //     state.token = null;\r\n        //     state.isLoggedIn = false;\r\n        // },\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const registrationRequest = createAction('auth/registrationRequest')\r\nexport const registrationSuccess = createAction('auth/registrationSuccess')\r\nexport const registrationError = createAction('auth/registrationrError')\r\n\r\nexport const loginRequest = createAction('auth/loginRequest')\r\nexport const loginSuccess = createAction('auth/loginSuccess')\r\nexport const loginError = createAction('auth/loginError')\r\n\r\nexport const logoutRequest = createAction('auth/logoutRequest')\r\nexport const logoutSuccess = createAction('auth/logoutSuccess')\r\nexport const logoutError = createAction('auth/logoutError')\r\n\r\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest')\r\nexport const getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess')\r\nexport const getCurrentUserError = createAction('auth/getCurrentUserError')","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const openModalTransaction = createAction('transactions/openModalTransaction',);\r\nexport const closeModalTransaction = createAction('transactions/closeModalTransaction',);\r\n\r\nexport const fetchTransactionRequest = createAction('transactions/fetchTransactionRequest');\r\nexport const fetchTransactionSuccess = createAction('transactions/fetchTransactionSuccess');\r\nexport const fetchTransactionError = createAction('transactions/fetchTransactionError');\r\nexport const addTransactionRequest = createAction('transactions/addTransactionRequest');\r\nexport const addTransactionSuccess = createAction('transactions/addTransactionSuccess');\r\nexport const addTransactionError = createAction('transactions/addTransactionError');\r\n\r\nexport const getQueryStatisticsRequest = createAction('transactions/getQueryStatisticsRequest');\r\nexport const getQueryStatisticsSuccess = createAction('transactions/getQueryStatisticsSuccess');\r\nexport const getQueryStatisticsError = createAction('transactions/getQueryStatisticsError');\r\n\r\nexport const getTransactionCategoriesRequest = createAction('transactions/getTransactionCategoriesRequest');\r\nexport const getTransactionCategoriesSuccess = createAction('transactions/getTransactionCategoriesSuccess');\r\nexport const getTransactionCategoriesError = createAction('transactions/getTransactionCategoriesError');\r\n","import { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport {authSelectors} from '../redux/auth';\r\n\r\nexport default function PrivateRoute({ \r\n    children, \r\n    redirectTo,\r\n    ...routeProps }) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    return (\r\n        <Route {...routeProps}>\r\n            {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n        </Route>\r\n    );\r\n}","import axios from 'axios';\r\nimport * as actions from './auth-actions'\r\nimport toastr from 'toastr';\r\n\r\naxios.defaults.baseURL = 'https://fin-project-group4.herokuapp.com/api';\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `${token}`;\r\n  },\r\n  unset(token) {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst registration = ({ email, password, name }) => dispatch => {\r\n  dispatch(actions.registrationRequest())\r\n  axios.post('/auth/signup', { email, password, name })\r\n    .then((data) => {\r\n      token.set(data.token);\r\n      dispatch(actions.registrationSuccess(data))\r\n      toastr.success('Регистрация прошла успешно!');\r\n    })\r\n    .catch((error) => {\r\n      dispatch(actions.registrationError(error.message))\r\n      toastr.error(error.message);\r\n    })\r\n}\r\nconst login = ({ email, password }) => dispatch => {\r\n  dispatch(actions.loginRequest())\r\n  axios.post('/auth/login', { email, password })\r\n    .then(data => {\r\n      token.set(data.token)\r\n      dispatch(actions.loginSuccess(data))\r\n      toastr.success('Авторизация прошла успешно!');\r\n    }).catch((error) => {\r\n      dispatch(actions.loginError(error.message))\r\n      toastr.error(error.message)\r\n    })\r\n}\r\nconst logout = () => dispatch => {\r\n  dispatch(actions.logoutRequest())\r\n  toastr.success('Вы вышли из учетной записи');\r\n  axios.get('/auth/logout')\r\n    .then(() => {\r\n      token.unset();\r\n      dispatch(actions.logoutSuccess());\r\n    }).catch(error => {\r\n      dispatch(actions.logoutError(error.message));\r\n      toastr.error(error.message)\r\n    })\r\n    .catch(error => {\r\n      dispatch(actions.logoutError(error.message));\r\n    });\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n  token.set(persistedToken);\r\n  await dispatch(actions.getCurrentUserRequest());\r\n  axios.get('/auth/current')\r\n    .then((data) => {\r\n      dispatch(actions.getCurrentUserSuccess(data))\r\n    })\r\n    .catch(error => {\r\n      dispatch(actions.getCurrentUserRequest(error.message));\r\n      toastr.error(error.message)\r\n    })\r\n}\r\n\r\nconst operations = {\r\n  registration,\r\n  login,\r\n  logout,\r\n  getCurrentUser,\r\n};\r\n\r\nexport default operations;","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n    openModalTransaction,\r\n    closeModalTransaction,\r\n    fetchTransactionSuccess,\r\n    addTransactionSuccess,\r\n    getQueryStatisticsSuccess,\r\n    getTransactionCategoriesSuccess,\r\n} from './transactions-actions';\r\n\r\nconst modalTransaction = createReducer(false, {\r\n    [openModalTransaction]: () => true,\r\n    [closeModalTransaction]: () => false,\r\n});\r\n\r\nconst allTransactions = createReducer([], {\r\n    [addTransactionSuccess]: (state, { payload }) => {return [payload, ...state]},\r\n    [fetchTransactionSuccess]: (_, { payload }) => payload,\r\n    \r\n});\r\n\r\nconst queryStatistics = createReducer([], {\r\n    [getQueryStatisticsSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nconst transactionCategories = createReducer([], {\r\n    [getTransactionCategoriesSuccess]: (_, { payload }) => [...payload],\r\n});\r\n\r\nexport default combineReducers({\r\n    modalTransaction,\r\n    allTransactions,\r\n    queryStatistics,\r\n    transactionCategories\r\n}) \r\n"],"sourceRoot":""}