{"version":3,"sources":["components/authorization/LoginForm/LoginForm.js","views/LoginPage/LoginPage.js"],"names":["LoginForm","dispatch","useDispatch","validationsSchema","yup","shape","email","required","password","matches","min","max","typeError","initialValues","confirmPassword","name","validateOnBlur","onSubmit","resetForm","operations","login","validationSchema","values","errors","touched","handleSubmit","handleChange","handleBlur","isValid","dirty","className","type","placeholder","value","onChange","onBlur","to","RegistrationView","query","render"],"mappings":"iRAOe,SAASA,IACpB,IAAMC,EAAWC,cACXC,EAAoBC,MAAaC,MAAM,CACzCC,MAAOF,MAAaE,MAAM,iHAA4BC,SAAS,gGAC/DC,SAAUJ,MAAaK,QACnB,sBACA,+KACFC,IAAI,EAAG,qMAA0CC,IAAI,GAAI,oMAAyCC,UAAU,4GAAuBL,SAAS,kGAElJ,OACI,cAAC,IAAD,CACIM,cAAe,CACXP,MAAO,GACPE,SAAU,GACVM,gBAAiB,GACjBC,KAAM,IAEVC,gBAAc,EACdC,SAAU,cAAyC,IAAtCX,EAAqC,EAArCA,MAAOE,EAA8B,EAA9BA,SAAcU,EAAgB,EAAhBA,UAC9BjB,EAASkB,IAAWC,MAAM,CAAEd,QAAOE,cACnCU,KAEJG,iBAAkBlB,EAZtB,SAcK,gBAAGmB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,WAAxD,EAAoEC,QAApE,EAA6EC,MAA7E,OACG,qBAAKC,UAAU,aAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,sBAAMA,UAAU,SAChB,uBACIA,UAAU,YACVb,SAAUQ,EAFd,UAII,wBAAOK,UAAU,aAAaC,KAAK,QAAnC,UACI,uBACID,UAAU,aACVE,YAAY,SACZD,KAAK,QACLhB,KAAK,QACLkB,MAAOX,EAAOhB,MACd4B,SAAUR,EACVS,OAAQR,IAEXH,EAAQlB,OAASiB,EAAOjB,OAAS,mBAAGwB,UAAW,cAAd,SAA8BP,EAAOjB,WAE3E,wBAAOwB,UAAU,aAAaC,KAAK,WAAnC,UACI,uBACID,UAAU,aACVE,YAAY,uCACZD,KAAK,WACLhB,KAAK,WACLkB,MAAOX,EAAOd,SACd0B,SAAUR,EACVS,OAAQR,IAEXH,EAAQhB,UAAYe,EAAOf,UAAY,mBAAGsB,UAAW,cAAd,SAA8BP,EAAOf,cAEjF,wBAAQsB,UAAU,eAAeC,KAAK,SAAtC,sCACA,cAAC,IAAD,CACID,UAAU,aACVM,GAAG,kCAFP,2FC5Db,SAASC,IAEpB,OACI,qCACI,cAAC,IAAD,CAAOC,MAAM,qBAAqBC,OAAQ,kBAEtC,cAACvC,EAAD,OAGJ,cAAC,IAAD,CAAOsC,MAAM,6CAA6CC,OAAQ,kBAE9D,sBAAKT,UAAU,aAAf,UACI,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,2BACf,mBAAGA,UAAU,WAAb,4BAEJ,cAAC9B,EAAD,UAKR,cAAC,IAAD,CAAOsC,MAAM,sBAAsBC,OAAQ,kBAEvC,sBAAKT,UAAU,aAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,mBAAGA,UAAU,WAAb,4BAEJ,qBAAKA,UAAU,uBAAf,SACI,cAAC9B,EAAD","file":"static/js/LoginView.36e944c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport operations from '../../../redux/auth/auth-operations';\r\nimport '../authForm.scss'\r\nexport default function LoginForm() {\r\n    const dispatch = useDispatch();\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().email('Введите корректный email').required('Обязательноe поле'),\r\n        password: yup.string().matches(\r\n            /[0-9a-zA-Z!@#$%^&*]/,\r\n            'Недопустимые символы для пароля'\r\n        ).min(6, 'Пароль должен быть не менее 6 символов').max(12, 'Максимальная длина пароля 12 символов').typeError('Должно быть строкой').required('Обязательноe поле'),\r\n    })\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                name: '',\r\n            }}\r\n            validateOnBlur\r\n            onSubmit={({ email, password }, { resetForm }) => {\r\n                dispatch(operations.login({ email, password }))\r\n                resetForm();\r\n            }}\r\n            validationSchema={validationsSchema}\r\n        >\r\n            {({ values, errors, touched, handleSubmit, handleChange, handleBlur, isValid, dirty }) => (\r\n                <div className=\"form-block\">\r\n                    <div className=\"form-container\">\r\n                        <span className=\"logo\"></span>\r\n                        <form\r\n                            className=\"auth-form\"\r\n                            onSubmit={handleSubmit}\r\n                        >\r\n                            <label className=\"form-label\" type=\"email\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"E-mail\"\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                {touched.email && errors.email && <p className={'input-error'}>{errors.email}</p>}\r\n                            </label>\r\n                            <label className=\"form-label\" type=\"password\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Пароль\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    value={values.password}\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                />\r\n                                {touched.password && errors.password && <p className={'input-error'}>{errors.password}</p>}\r\n                            </label>\r\n                            <button className=\"login-button\" type=\"submit\">Вход</button>\r\n                            <NavLink\r\n                                className=\"nav-button\"\r\n                                to=\"/fin-project-front/registration\"\r\n                            // exact\r\n                            >\r\n                                Регистрация\r\n                            </NavLink>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    );\r\n};","import Media from 'react-media';\r\nimport LoginForm from '../../components/authorization/LoginForm/LoginForm'\r\n\r\n\r\nexport default function RegistrationView() {\r\n\r\n    return (\r\n        <>\r\n            <Media query=\"(max-width: 767px)\" render={() =>\r\n            (\r\n                <LoginForm />\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 768px) and (max-width: 1279px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block\">\r\n                        <div className=\"auth-image login-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <LoginForm />\r\n                </div>\r\n\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 1280px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block login-block\">\r\n                        <div className=\"auth-image login-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <div className=\"form-blur login-blur\">\r\n                        <LoginForm />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            />\r\n        </>\r\n    );\r\n};"],"sourceRoot":""}