{"version":3,"sources":["components/authorization/RegistrationForm/RegistrationForm.js","views/RegistrationPage/RegistrationPage.js"],"names":["RegistrationForm","dispatch","useDispatch","useState","validationsSchema","yup","shape","email","required","password","matches","min","max","typeError","confirmPassword","oneOf","name","initialValues","validateOnBlur","validateOnChange","onSubmit","resetForm","operations","registration","validationSchema","values","errors","touched","handleSubmit","handleChange","handleBlur","isValid","dirty","className","type","placeholder","onChange","onBlur","value","to","RegistrationView","query","render"],"mappings":"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","file":"static/js/RegisterView.1d88b64a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Formik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport operations from '../../../redux/auth/auth-operations';\r\nimport '../authForm.scss'\r\nexport default function RegistrationForm() {\r\n    const dispatch = useDispatch()\r\n    const [count, setCount] = useState(0)\r\n    const countUp = () => {\r\n        setCount(prevState => prevState + 1)\r\n        console.log(count)\r\n    }\r\n    // useEffect(() => {\r\n    //     console.log(count)\r\n    // }, [count]);\r\n    const validationsSchema = yup.object().shape({\r\n        email: yup.string().email('Введите корректный email').required('Обязательноe поле'),\r\n        password: yup.string().matches(\r\n            // /(?=.*[0-9])(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*]/,\r\n            /[0-9a-zA-Z!@#$%^&*]/,\r\n            'Недопустимые символы для пароля'\r\n        ).min(6, 'Пароль должен быть не менее 6 символов').max(12, 'Максимальная длина пароля 12 символов').typeError('Должно быть строкой').required('Обязательноe поле'),\r\n        confirmPassword: yup.string().oneOf([yup.ref('password')], 'Пароли не совпадают').required('Обязательноe поле'),\r\n        name: yup.string().min(1, 'Минимальная длина имени 1 символ').typeError('Должно быть строкой').required('Обязательноe поле'),\r\n    })\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n                name: '',\r\n            }}\r\n            validateOnBlur\r\n            validateOnChange={false}\r\n            onSubmit={({ email, password, name }, { resetForm }) => {\r\n                dispatch(operations.registration({ email, password, name }))\r\n                resetForm();\r\n            }}\r\n            validationSchema={validationsSchema}\r\n        >\r\n            {({ values, errors, touched, handleSubmit, handleChange, handleBlur, isValid, dirty }) => (\r\n                <div className=\"form-block\">\r\n                    <div className=\"form-container\">\r\n                        <span className=\"logo\"></span>\r\n                        <form\r\n                            className=\"auth-form\"\r\n                            onSubmit={handleSubmit}>\r\n                            <label className=\"form-label\" type=\"email\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"E-mail\"\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.email}\r\n                                />\r\n                                {touched.email && errors.email && <p className={'input-error'}>{errors.email}</p>}\r\n                            </label>\r\n                            <label className=\"form-label\" type=\"password\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Пароль\"\r\n                                    type=\"password\"\r\n                                    name=\"password\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.password}\r\n                                />\r\n                                {touched.password && errors.password && <p className={'input-error'}>{errors.password}</p>}\r\n                            </label>\r\n                            <label className=\"form-label\" type=\"password\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Подтвердите пароль\"\r\n                                    type=\"password\"\r\n                                    name=\"confirmPassword\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.confirmPassword}\r\n                                />\r\n                                {touched.confirmPassword && errors.confirmPassword && <p className={'input-error'}>{errors.confirmPassword}</p>}\r\n                            </label>\r\n                            <progress value=\"1\" max=\"4\"></progress>\r\n                            <label className=\"form-label\" type=\"text\">\r\n                                <input\r\n                                    className=\"form-input\"\r\n                                    placeholder=\"Ваше имя\"\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    onChange={handleChange}\r\n                                    onBlur={handleBlur}\r\n                                    value={values.name}\r\n                                />\r\n                                {touched.name && errors.name && <p className={'input-error'}>{errors.name}</p>}\r\n                            </label>\r\n                            <button className=\"login-button\" type=\"submit\">Регистрация</button>\r\n                            <NavLink\r\n                                className=\"nav-button\"\r\n                                to=\"/fin-project-front/login\"\r\n                            // exact\r\n                            >\r\n                                Вход\r\n                            </NavLink>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    )\r\n}","import Media from 'react-media';\r\nimport RegistrationForm from '../../components/authorization/RegistrationForm/RegistrationForm'\r\n\r\n\r\nexport default function RegistrationView() {\r\n    return (\r\n        <>\r\n            <Media query=\"(max-width: 767px)\" render={() =>\r\n            (\r\n                <RegistrationForm />\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 768px) and (max-width: 1279px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block\">\r\n                        <div className=\"auth-image reg-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <RegistrationForm />\r\n                </div>\r\n            )}\r\n            />\r\n            <Media query=\"(min-width: 1280px)\" render={() =>\r\n            (\r\n                <div className=\"auth-block\">\r\n                    <div className=\"side-block reg-block\">\r\n                        <div className=\"auth-image reg-image\"></div>\r\n                        <p className=\"app-name\">Finance App</p>\r\n                    </div>\r\n                    <div className=\"form-blur reg-blur\">\r\n                        <RegistrationForm />\r\n                    </div>\r\n                </div>\r\n            )}\r\n            />\r\n        </>\r\n\r\n\r\n    );\r\n};"],"sourceRoot":""}