{"version":3,"sources":["components/PublicRoute.js","components/PrivateRoute.js","App.js","redux/store.js","index.js","redux/auth/auth-selectors.js","redux/auth/auth-reducer.js","redux/transactions/transactions-reducer.js","redux/auth/auth-actions.js","redux/transactions/transactions-operations.js","redux/auth/auth-operations.js","redux/transactions/transactions-selectors.js","components/dashboard/TableTransactions/TableTransactions.js","redux/transactions/transactions-actions.js"],"names":["PublicRoute","component","redirectTo","children","routeProps","shouldRedirect","useSelector","authSelectors","getIsLoggedIn","restricted","to","PrivateRoute","isLoggedIn","HomePage","lazy","StatisticPage","CurrencyPage","RegistrationPage","LoginPage","App","dispatch","useDispatch","name","getUserName","console","log","useEffect","authOperations","getCurrentUser","className","fallback","type","color","height","width","exact","path","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","transactions","transactionsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","state","user","getUserEmail","email","getToken","token","initialState","createReducer","actions","_","payload","data","setError","error","combineReducers","modalTransaction","openModalTransaction","closeModalTransaction","allTransactions","addTransactionSuccess","fetchTransactionSuccess","queryStatistics","getQueryStatisticsSuccess","transactionCategories","getTransactionCategoriesSuccess","registrationRequest","createAction","registrationSuccess","registrationError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","fetchTransactions","a","fetchTransactionRequest","axios","get","fetchTransactionError","message","addTransaction","transactionData","addTransactionRequest","post","result","addTransactionError","getQueryStatistics","month","year","getQueryStatisticsRequest","getQueryStatisticsError","getCategories","getTransactionCategoriesRequest","getTransactionCategoriesError","defaults","baseURL","headers","common","Authorization","operations","registration","password","then","catch","login","logout","getState","persistedToken","getAllTransactions","getAddTransactions","addTransactions","getAllQueryStatistics","getIsModalAddTransactionOpen","getTransactionCategories","TableTransactions","transactionsOperations","transactionsSelectors","length","style","padding","display","justifyContent","window","matchMedia","matches","paddingLeft","paddingTop","margin","map","row","id","_id","date","category","comment","sum","balance"],"mappings":"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","file":"static/js/main.f5d0c9fd.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { authSelectors } from '../redux/auth';\r\n\r\nexport default function PublicRoute({ \r\n    component: Component,\r\n    redirectTo,\r\n    children,\r\n    ...routeProps\r\n }) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    const shouldRedirect = isLoggedIn && routeProps.restricted;\r\n    return (\r\n        <Route {...routeProps}>\r\n            {shouldRedirect ? <Redirect to={redirectTo}/> : children }\r\n        </Route>\r\n    );\r\n}","import { useSelector } from \"react-redux\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport {authSelectors} from '../redux/auth';\r\n\r\nexport default function PrivateRoute({ \r\n    children, \r\n    redirectTo,\r\n    ...routeProps }) {\r\n    const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n    return (\r\n        <Route {...routeProps}>\r\n            {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n        </Route>\r\n    );\r\n}","// import logo from './wallet-logo.svg';\r\n\r\nimport React, { Suspense, lazy, useEffect } from 'react';\r\nimport { Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authOperations, authSelectors } from './redux/auth';\r\nimport Loader from 'react-loader-spinner';\r\n\r\nimport PublicRoute from './components/PublicRoute'\r\nimport PrivateRoute from './components/PrivateRoute'\r\n\r\nimport './App.scss';\r\n\r\nimport TableTransactions from './components/dashboard/TableTransactions';\r\n\r\nconst HomePage = lazy(() => import('./views/HomePage/HomePage'))\r\nconst StatisticPage = lazy(() => import('./views/StatisticPage/StatisticPage'))\r\nconst CurrencyPage = lazy(() => import('./views/CurrencyPage/CurrencyPage'))\r\n\r\nconst RegistrationPage = lazy(() => import('./views/RegistrationPage/RegistrationPage' /* webpackChunkName: \"RegisterView\"*/),);\r\nconst LoginPage = lazy(() => import('./views/LoginPage/LoginPage' /* webpackChunkName: \"LoginView\"*/),);\r\n\r\nexport default function App() {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn)\r\n  const name = useSelector(authSelectors.getUserName)\r\n  console.log(isLoggedIn)\r\n  console.log(name)\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.getCurrentUser());\r\n  }, [dispatch]);\r\n\r\n\r\n  return (\r\n    /* !isFetchingCurrentUser && */\r\n    (\r\n      <div className=\"App\">\r\n        <Suspense fallback={<Loader type=\"ThreeDots\" color=\"brown\" height={80} width={80} />}>\r\n\r\n          <Switch>\r\n            <PublicRoute exact path=\"/fin-project-front/registration\" redirectTo=\"/fin-project-front/home\">\r\n              <RegistrationPage />\r\n            </PublicRoute>\r\n\r\n            <PublicRoute path=\"/fin-project-front/login\" restricted redirectTo=\"/fin-project-front/home\">\r\n              <LoginPage />\r\n            </PublicRoute>\r\n\r\n            {/* CHANGE INTO PrivateRoute */}\r\n            <PrivateRoute path=\"/fin-project-front/home\" redirectTo=\"/fin-project-front/login\">\r\n              <HomePage />\r\n            </PrivateRoute>\r\n\r\n            {/* CHANGE INTO PrivateRoute */}\r\n            <PrivateRoute path=\"/fin-project-front/statistics\" redirectTo=\"/fin-project-front/login\">\r\n              <StatisticPage />\r\n            </PrivateRoute>\r\n\r\n            {/* CHANGE INTO PrivateRoute */}\r\n            <PrivateRoute path=\"/fin-project-front/currency\" redirectTo=\"/fin-project-front/login\">\r\n              <CurrencyPage />\r\n            </PrivateRoute>\r\n\r\n            <PublicRoute>\r\n              <Redirect to=\"/fin-project-front/registration\" />\r\n            </PublicRoute>\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    ));\r\n}\r\n","// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport transactionsReducer from './transactions/transactions-reducer';\r\nimport { authReducer } from './auth';\r\n//import { balance } from './balance';\r\nimport { logger } from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  // logger,\r\n];\r\n\r\n// const transactionsPersistConfig = {\r\n//     key: 'transactions',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n// const rootReducer = combineReducers({\r\n//     transactions: transactionsReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n    transactions: transactionsReducer,\r\n    //balance: balance,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate\r\n        loading={<h3>Загружаем локальное хранилище</h3>}\r\n        persistor={persistor}\r\n      >\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getToken = state => state.auth.token; //added line to re-set token for statistics API\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nconst getUserEmail = state => state.auth.user.email;\r\n\r\n\r\nconst authSelectors = {\r\n    getIsLoggedIn,\r\n    getUserName,\r\n    getUserEmail,\r\n    getToken,\r\n};\r\nexport default authSelectors;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from './auth-actions'\r\n\r\nconst initialState = {\r\n    user: { name: null, email: null }\r\n};\r\n\r\nconst user = createReducer(initialState, {\r\n    [actions.registrationSuccess]: (_, { payload }) => payload.data,\r\n    [actions.loginSuccess]: (_, { payload }) => payload.data.user,\r\n    [actions.logoutRequest]: () => initialState,\r\n    [actions.getCurrentUserSuccess]: (_, { payload }) => payload.data.data.user\r\n});\r\n\r\nconst token = createReducer(null, {\r\n    [actions.registrationSuccess]: (_, { payload }) => payload.data.token,\r\n    [actions.loginSuccess]: (_, { payload }) => payload.data.token,\r\n    [actions.logoutSuccess]: () => null,\r\n    [actions.logoutRequest]: () => null,\r\n});\r\n\r\nconst isLoggedIn = createReducer(false, {\r\n    [actions.registrationSuccess]: () => false,\r\n    [actions.loginSuccess]: () => true,\r\n    [actions.getCurrentUserSuccess]: () => true,\r\n    [actions.logoutSuccess]: () => false,\r\n    [actions.logoutRequest]: () => false,\r\n    [actions.registrationError]: false,\r\n    [actions.loginError]: false,\r\n    [actions.getCurrentUserError]: false\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n    [actions.registrationError]: setError,\r\n    [actions.loginError]: setError,\r\n    [actions.logoutError]: setError,\r\n    [actions.getCurrentUserError]: setError,\r\n});\r\n\r\nexport default combineReducers({\r\n    user,\r\n    token,\r\n    isLoggedIn,\r\n    error\r\n});\r\n        // [authOperations.logOut.fulfilled](state) {\r\n        //     state.user = { name: null, email: null };\r\n        //     state.token = null;\r\n        //     state.isLoggedIn = false;\r\n        // },\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n    openModalTransaction,\r\n    closeModalTransaction,\r\n    fetchTransactionSuccess,\r\n    addTransactionSuccess,\r\n    getQueryStatisticsSuccess,\r\n    getTransactionCategoriesSuccess,\r\n} from './transactions-actions';\r\n\r\nconst modalTransaction = createReducer(false, {\r\n    [openModalTransaction]: () => true,\r\n    [closeModalTransaction]: () => false,\r\n});\r\n\r\nconst allTransactions = createReducer([], {\r\n    [addTransactionSuccess]: (state, { payload }) => {return [...state, payload]},\r\n    [fetchTransactionSuccess]: (_, { payload }) => payload,\r\n    \r\n});\r\n\r\nconst queryStatistics = createReducer([], {\r\n    [getQueryStatisticsSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nconst transactionCategories = createReducer([], {\r\n    [getTransactionCategoriesSuccess]: (_, { payload }) => [...payload],\r\n});\r\n\r\nexport default combineReducers({\r\n    modalTransaction,\r\n    allTransactions,\r\n    queryStatistics,\r\n    transactionCategories\r\n}) \r\n\r\n\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import { createReducer } from \"@reduxjs/toolkit\";\r\n// import * as actions from './transactions-actions';\r\n\r\n// const { fetchTransactionRequest, fetchTransactionSuccess, fetchTransactionError, addTransactionRequest, addTransactionSuccess, addTransactionError, deleteTransactionRequest, deleteTransactionSuccess, deleteTransactionError, updateTransactionRequest, updateTransactionSuccess, updateTransactionError, changeFilter } = actions;\r\n\r\n// const items = createReducer([], {\r\n//     [fetchTransactionSuccess]: (_, { payload }) => payload,\r\n\r\n//     [addTransactionSuccess]: (state, { payload }) => [...state, payload],\r\n\r\n//     [deleteTransactionSuccess]: (state, { payload }) => state.filter(transaction => transaction.id !== payload),\r\n    \r\n//     [updateTransactionSuccess]: (state, { payload }) => state.map(transaction => transaction.name === payload.name ? { ...transaction, number: payload.number } : transaction )\r\n// });\r\n\r\n// const loading = createReducer(false, {\r\n//     [fetchTransactionRequest]: () => true,\r\n//     [fetchTransactionSuccess]: () => false,\r\n//     [fetchTransactionError]: () => false,\r\n//     [addTransactionRequest]: () => true,\r\n//     [addTransactionSuccess]: () => false,\r\n//     [addTransactionError]: () => false,\r\n//     [deleteTransactionRequest]: () => true,\r\n//     [deleteTransactionSuccess]: () => false,\r\n//     [deleteTransactionError]: () => false,\r\n//     [updateTransactionRequest]: () => true,\r\n//     [updateTransactionSuccess]: () => false,\r\n//     [updateTransactionError]: () => false,\r\n// })\r\n           \r\n// const filter = createReducer('', {\r\n//     [changeFilter]: (_, { payload }) => payload\r\n// });\r\n\r\n// const error = createReducer(null, {\r\n//     [fetchTransactionError]: (_, { payload }) => payload,\r\n//     [addTransactionError]: (_, { payload }) => payload,\r\n//     [deleteTransactionError]: (_, { payload }) => payload,\r\n//     [updateTransactionError]: (_, { payload }) => payload,\r\n//     [fetchTransactionRequest]: () => null,\r\n//     [addTransactionRequest]: () => null,\r\n//     [deleteTransactionRequest]: () => null,\r\n//     [updateTransactionRequest]: () => null,\r\n//   });\r\n\r\n// export default combineReducers({ items, loading, filter, error });","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const registrationRequest = createAction('auth/registrationRequest')\r\nexport const registrationSuccess = createAction('auth/registrationSuccess')\r\nexport const registrationError = createAction('auth/registrationrError')\r\n\r\nexport const loginRequest = createAction('auth/loginRequest')\r\nexport const loginSuccess = createAction('auth/loginSuccess')\r\nexport const loginError = createAction('auth/loginError')\r\n\r\nexport const logoutRequest = createAction('auth/logoutRequest')\r\nexport const logoutSuccess = createAction('auth/logoutSuccess')\r\nexport const logoutError = createAction('auth/logoutError')\r\n\r\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest')\r\nexport const getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess')\r\nexport const getCurrentUserError = createAction('auth/getCurrentUserError')","import axios from 'axios';\r\nimport { fetchTransactionRequest,\r\n    fetchTransactionSuccess,\r\n    fetchTransactionError,\r\n    addTransactionRequest,\r\n    addTransactionSuccess,\r\n    addTransactionError,\r\n    getQueryStatisticsRequest,\r\n    getQueryStatisticsSuccess,\r\n    getQueryStatisticsError,\r\n    getTransactionCategoriesRequest,\r\n    getTransactionCategoriesSuccess,\r\n    getTransactionCategoriesError\r\n    } from './transactions-actions'\r\n\r\n\r\n    //GET \r\nconst fetchTransactions = () => async dispatch => {\r\n    dispatch(fetchTransactionRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/transactions');\r\n\r\n        dispatch(fetchTransactionSuccess(data.data.transactions));\r\n    } catch (error) {\r\n        dispatch(fetchTransactionError(error.message));\r\n    }\r\n};\r\n\r\n//POST\r\nconst addTransaction = transactionData => async dispatch => {\r\n\r\n    dispatch(addTransactionRequest());\r\n\r\n    try {\r\n        const { data } = await axios.post('/transactions', transactionData);\r\n        console.log(\"data\", data.data.result)\r\n        dispatch(addTransactionSuccess(data.data.result));\r\n        \r\n    } catch (error) {\r\n    dispatch(addTransactionError(error.message));\r\n    }\r\n};\r\n\r\n//GET\r\nconst getQueryStatistics = ({ month, year }) => async dispatch => {\r\n    dispatch(getQueryStatisticsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get(`/transactions/statistics?month=${month}&year=${year}`);\r\n\r\n        dispatch(getQueryStatisticsSuccess(data));\r\n    } catch (error) {\r\n        dispatch(getQueryStatisticsError(error));\r\n        }\r\n    };\r\n\r\n// getCategories\r\nconst getCategories = () => async dispatch => {\r\n    dispatch(getTransactionCategoriesRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/transactions/categories');\r\n        dispatch(getTransactionCategoriesSuccess(data.data));\r\n    } catch (error) {\r\n        dispatch(getTransactionCategoriesError(error.message));\r\n    }\r\n};\r\n\r\nexport { fetchTransactions, addTransaction, getQueryStatistics, getCategories };\r\n\r\n\r\n\r\n// import axios from 'axios';\r\n// import * as actions from './transactions-actions';\r\n\r\n// const { fetchTransactionRequest, fetchTransactionSuccess, fetchTransactionError, addTransactionRequest, addTransactionSuccess, addTransactionError, deleteTransactionRequest, deleteTransactionSuccess, deleteTransactionError, updateTransactionRequest, updateTransactionSuccess, updateTransactionError } = actions;\r\n\r\n// export const fetchTransaction = () => dispatch => {\r\n//     dispatch(fetchTransactionRequest());\r\n\r\n//     axios.get('/transactions').then(({ data }) => dispatch(fetchTransactionSuccess(data))).catch(error => dispatch(fetchTransactionError(error)));\r\n// };\r\n\r\n// export const addTransaction = (transactions, name, number) => dispatch => {\r\n//     // const isInTransactions = transactions.some(transaction => transaction.name === name);\r\n//     //     if (isInTransactions) { \r\n//     //         let replaceAgreement = window.confirm(`${name} is already in transactions. Replace ${name} number?`);\r\n\r\n//     //         if (!replaceAgreement) {\r\n//     //             const update = { number };\r\n//     //             dispatch(updateTransactionRequest());\r\n\r\n//     //             axios\r\n//     //             .patch(`/transactions/${name}`, update)\r\n//     //             .then(({ data }) => dispatch(updateTransactionSuccess(data)))\r\n//     //             .catch(error => dispatch(updateTransactionError(error)));\r\n//     //         }\r\n//     const isInTransactions = transactions.some(transaction => transaction.name === name);\r\n//         if (isInTransactions) { \r\n//             alert(`${name} is already in transactions`);\r\n//             return;\r\n//         }    \r\n//     const transaction = {\r\n//         name, \r\n//         number\r\n//     };\r\n\r\n//     dispatch(addTransactionRequest());\r\n\r\n//     axios.post('/transactions', transaction).then(({ data }) => dispatch(addTransactionSuccess(data))).catch(error => dispatch(addTransactionError(error)));\r\n// // }\r\n// };\r\n\r\n// export const deleteTransaction = transactionId => dispatch => {\r\n//     dispatch(deleteTransactionRequest());\r\n\r\n//     axios.delete(`/transactions/${transactionId}`).then(() => dispatch(deleteTransactionSuccess(transactionId))).catch(error => dispatch(deleteTransactionError(error)));\r\n// };\r\n\r\n// export const updateTransaction = (transactionId, number) => dispatch => {\r\n//     const update = { number };\r\n//     dispatch(updateTransactionRequest());\r\n\r\n//     axios.patch(`/transactions/${transactionId}`, update).then(({ data }) => dispatch(updateTransactionSuccess(data))).catch(error => dispatch(updateTransactionError(error)));\r\n// };\r\n\r\n// // const operations = { fetchTransaction, addTransaction, deleteTransaction, updateTransaction };\r\n// // export default operations;\r\n","import axios from \"axios\";\r\nimport * as actions from './auth-actions'\r\naxios.defaults.baseURL = 'https://fin-project-group4.herokuapp.com/api';\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `${token}`;\r\n  },\r\n  unset(token) {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst registration = ({ email, password, name }) => dispatch => {\r\n  dispatch(actions.registrationRequest())\r\n  axios.post('/auth/signup', { email, password, name })\r\n    .then((data) => {\r\n      token.set(data.token);\r\n      dispatch(actions.registrationSuccess(data))\r\n    }).catch((error) => {\r\n      dispatch(actions.registrationError(error.message))\r\n    })\r\n}\r\nconst login = ({ email, password }) => dispatch => {\r\n  dispatch(actions.loginRequest())\r\n  axios.post('/auth/login', { email, password })\r\n    .then(data => {\r\n      token.set(data.token)\r\n      dispatch(actions.loginSuccess(data))\r\n    }).catch((error) => {\r\n      dispatch(actions.loginError(error.message))\r\n    })\r\n}\r\n\r\nconst logout = () => dispatch => {\r\n  dispatch(actions.logoutRequest())\r\n  axios.get('/auth/logout')\r\n    .then(() => {\r\n      token.unset();\r\n      dispatch(actions.logoutSuccess());\r\n    }).catch(error => {\r\n      dispatch(actions.logoutError(error.message));\r\n    })\r\n}\r\n\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n  token.set(persistedToken);\r\n  await dispatch(actions.getCurrentUserRequest());\r\n\r\n  axios.get('/auth/current')\r\n    .then((data) => {\r\n      dispatch(actions.getCurrentUserSuccess(data))\r\n      // console.log(data)\r\n    })\r\n    .catch((error) => {\r\n      dispatch(actions.getCurrentUserRequest(error.message));\r\n    })\r\n}\r\n\r\nconst operations = {\r\n  registration,\r\n  login,\r\n  logout,\r\n  getCurrentUser\r\n};\r\n\r\nexport default operations;","const getAllTransactions = state => state.transactions.allTransactions;\r\nconst getAddTransactions = state => state.transactions.addTransactions;\r\nconst getAllQueryStatistics = state => state.transactions.queryStatistics;\r\nconst getIsModalAddTransactionOpen = state => state.transactions.modalTransaction;\r\nconst getTransactionCategories = state => state.transactions.transactionCategories;\r\n\r\n\r\nexport {\r\n  getAllTransactions,\r\n  getAddTransactions,\r\n  getAllQueryStatistics,\r\n  getIsModalAddTransactionOpen,\r\n  getTransactionCategories\r\n};\r\n\r\n\r\n\r\n// import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\n// export const getTransactions = state => state.transactions.items;\r\n// export const getFilter = state => state.transactions.filter;\r\n// export const getTotalTransactions = state => state.transactions.items.length;\r\n// export const getError = state => state.transactions.error;\r\n// export const getLoadingStatus = state => state.transactions.loading;\r\n\r\n// export const getFiltredTransactions = createSelector(\r\n//     [getTransactions, getFilter],\r\n//     (transactions, filter) => {\r\n//       const normalizedFilter = filter.toLowerCase();  \r\n//       return transactions.filter(transaction => transaction.name.includes(normalizedFilter),\r\n//       );\r\n//     },\r\n//   );\r\n\r\n// export const getFiltredTransactions = state => {\r\n//     const transactions = getTransactions(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n   \r\n//     return transactions.filter(transaction => transaction.name.includes(normalizedFilter))};\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './TableTransactions.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { transactionsOperations, transactionsSelectors } from \"../../../redux/transactions\";\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default function TableTransactions() {  \r\n  const dispatch = useDispatch();\r\n  \r\n  useEffect(() => {\r\n    dispatch(transactionsOperations.fetchTransactions());\r\n  }, [dispatch]);\r\n  const transactions = useSelector(transactionsSelectors.getAllTransactions);\r\n  \r\n    return ((!transactions.length) && (<><h1 style={{ padding: '20px'}}>Welcome to your wallet! Here would be shown your transactios</h1> \r\n      <h2 style={{ color: 'LightSeaGreen'}}> Click \"+\" to add one </h2></>) ||\r\n      (transactions.length) &&\r\n      (<div className=\"transactionscContainer\" style={{ display: 'flex', justifyContent: 'center' }}\r\n      >\r\n        {window.matchMedia('( max-width:767px)').matches ? (\r\n          <ul style={{paddingLeft:0, paddingTop:0, margin:0}}>\r\n            {transactions.map(row => {\r\n              return (\r\n                <ul className={\"transactions__list__mobile \" + \"transactions__list__mobile\" + row.type}  id={row._id}>\r\n                  <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Дата</span>\r\n                    <span className=\"\">{row.date}</span>\r\n                  </li>\r\n                  <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Тип</span>\r\n                    <span className=\"transactions__item__mobile__data\">{row.type === 'expense' ? '-' : '+'}</span>\r\n                  </li>\r\n                   <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Категория</span>\r\n                    <span className=\"transactions__item__mobile__data\">{row.category}</span>\r\n                  </li>\r\n                  <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Комментарий</span>\r\n                    <span className=\"transactions__item__mobile__data\">{row.comment}</span>\r\n                  </li>\r\n                   <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Сумма</span>\r\n                    <span className={'transactions__item__mobile__data__' + row.type}>{row.sum}</span>\r\n                  </li>\r\n                  <li className=\"transactions__item__mobile\">                    \r\n                    <span className=\"transactions__menu-item\">Баланс</span>\r\n                    <span className=\"transactions__item__mobile__data\">{row.balance}</span>\r\n                  </li>                       \r\n\r\n                </ul>\r\n              );\r\n            })}\r\n          </ul>\r\n        )\r\n          :\r\n          (\r\n          <ul className=\"transactions list\">\r\n            <li className=\"transactions__menu\">\r\n              <span className=\"transactions__menu-item\">Дата</span>\r\n              <span className=\"transactions__menu-item\">Тип</span>\r\n              <span className=\"transactions__menu-item\">Категория</span>\r\n              <span className=\"transactions__menu-item\">Комментарий</span>\r\n              <span className=\"transactions__menu-item\">Сумма</span>\r\n              <span className=\"transactions__menu-item\">Баланс</span>\r\n            </li>\r\n            {transactions.map(row => {\r\n              return (\r\n                <li className=\"transactions__item\" id={row._id}>\r\n                  <span className=\"transactions__costs\">{row.date}</span>\r\n                  <span className=\"transactions__costs\">\r\n                    {row.type === 'expense' ? '-' : '+'}\r\n                  </span>\r\n                  <span className=\"transactions__costs\">{row.category}</span>\r\n                  <span className=\"transactions__costs\">{row.comment}</span>\r\n                  <span className={'transactions__costs__' + row.type}>\r\n                    {row.sum}\r\n                  </span>\r\n                  <span className=\"transactions__costs\">{row.balance}</span>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>)\r\n    );\r\n  }\r\n\r\n// TableTransactions.propTypes = {\r\n//   classes: PropTypes.object.isRequired,\r\n// };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const openModalTransaction = createAction('transactions/openModalTransaction',);\r\nexport const closeModalTransaction = createAction('transactions/closeModalTransaction',);\r\n\r\nexport const fetchTransactionRequest = createAction('transactions/fetchTransactionRequest');\r\nexport const fetchTransactionSuccess = createAction('transactions/fetchTransactionSuccess');\r\nexport const fetchTransactionError = createAction('transactions/fetchTransactionError');\r\nexport const addTransactionRequest = createAction('transactions/addTransactionRequest');\r\nexport const addTransactionSuccess = createAction('transactions/addTransactionSuccess');\r\nexport const addTransactionError = createAction('transactions/addTransactionError');\r\n\r\nexport const getQueryStatisticsRequest = createAction('transactions/getQueryStatisticsRequest');\r\nexport const getQueryStatisticsSuccess = createAction('transactions/getQueryStatisticsSuccess');\r\nexport const getQueryStatisticsError = createAction('transactions/getQueryStatisticsError');\r\n\r\nexport const getTransactionCategoriesRequest = createAction('transactions/getTransactionCategoriesRequest');\r\nexport const getTransactionCategoriesSuccess = createAction('transactions/getTransactionCategoriesSuccess');\r\nexport const getTransactionCategoriesError = createAction('transactions/getTransactionCategoriesError');\r\n\r\n// import { createAction } from '@reduxjs/toolkit';\r\n\r\n// export const fetchTransactionRequest = createAction('transactions/fetchTransactionRequest');\r\n// export const fetchTransactionSuccess = createAction('transactions/fetchTransactionSuccess');\r\n// export const fetchTransactionError = createAction('transactions/fetchTransactionError');\r\n\r\n// export const addTransactionRequest = createAction('transactions/addTransactionRequest');\r\n// export const addTransactionSuccess = createAction('transactions/addTransactionSuccess');\r\n// export const addTransactionError = createAction('transactions/addTransactionError');\r\n\r\n// export const deleteTransactionRequest = createAction('transactions/deleteTransactionRequest');\r\n// export const deleteTransactionSuccess = createAction('transactions/deleteTransactionSuccess');\r\n// export const deleteTransactionError = createAction('transactions/deleteTransactionError');\r\n\r\n// export const updateTransactionRequest = createAction('transactions/updateTransactionRequest');\r\n// export const updateTransactionSuccess = createAction('transactions/updateTransactionSuccess');\r\n// export const updateTransactionError = createAction('transactions/updateTransactionError');\r\n\r\n// export const changeFilter = createAction('transactions/changeFilter');"],"sourceRoot":""}